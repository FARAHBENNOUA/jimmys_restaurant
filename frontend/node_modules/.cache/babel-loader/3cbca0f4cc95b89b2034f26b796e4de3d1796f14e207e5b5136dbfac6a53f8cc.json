{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { platAPI } from '../../api/config';\nexport const usePlats = () => {\n  _s();\n  const [plats, setPlats] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Récupération de tous les plats\n  const fetchPlats = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await platAPI.getAllPlats();\n      setPlats(response.data || []);\n      return response.data;\n    } catch (err) {\n      var _err$response, _err$response$data;\n      const errorMessage = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Erreur lors de la récupération des plats';\n      setError(errorMessage);\n      console.error(errorMessage);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Récupération d'un plat par son ID\n  const getPlat = async id => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await platAPI.getPlat(id);\n      return response.data;\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      const errorMessage = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Erreur lors de la récupération du plat';\n      setError(errorMessage);\n      console.error(errorMessage);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Création d'un plat\n  const createPlat = async platData => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await platAPI.createPlat(platData);\n      setPlats([...plats, response.data]);\n      return response.data;\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      const errorMessage = ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || 'Erreur lors de la création du plat';\n      setError(errorMessage);\n      console.error(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Mise à jour d'un plat\n  const updatePlat = async (id, platData) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await platAPI.updatePlat(id, platData);\n      setPlats(plats.map(plat => plat.id === id ? response.data : plat));\n      return response.data;\n    } catch (err) {\n      var _err$response4, _err$response4$data;\n      const errorMessage = ((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || 'Erreur lors de la mise à jour du plat';\n      setError(errorMessage);\n      console.error(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Suppression d'un plat\n  const deletePlat = async id => {\n    setLoading(true);\n    setError(null);\n    try {\n      await platAPI.deletePlat(id);\n      setPlats(plats.filter(plat => plat.id !== id));\n      return true;\n    } catch (err) {\n      var _err$response5, _err$response5$data;\n      const errorMessage = ((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : (_err$response5$data = _err$response5.data) === null || _err$response5$data === void 0 ? void 0 : _err$response5$data.message) || 'Erreur lors de la suppression du plat';\n      setError(errorMessage);\n      console.error(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Ajout d'images à un plat\n  const addPlatImages = async (platId, images) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const formData = new FormData();\n      for (let i = 0; i < images.length; i++) {\n        formData.append('images', images[i]);\n      }\n      const response = await platAPI.addPlatImages(platId, formData);\n\n      // Mise à jour du plat local avec les nouvelles images\n      setPlats(plats.map(plat => {\n        if (plat.id === platId) {\n          return {\n            ...plat,\n            images: [...(plat.images || []), ...response.data.images]\n          };\n        }\n        return plat;\n      }));\n      return response.data;\n    } catch (err) {\n      var _err$response6, _err$response6$data;\n      const errorMessage = ((_err$response6 = err.response) === null || _err$response6 === void 0 ? void 0 : (_err$response6$data = _err$response6.data) === null || _err$response6$data === void 0 ? void 0 : _err$response6$data.message) || 'Erreur lors de l\\'ajout des images';\n      setError(errorMessage);\n      console.error(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    plats,\n    loading,\n    error,\n    fetchPlats,\n    getPlat,\n    createPlat,\n    updatePlat,\n    deletePlat,\n    addPlatImages\n  };\n};\n_s(usePlats, \"8zumg0MEYJVUAHAviFlnNM+vHjE=\");","map":{"version":3,"names":["useState","platAPI","usePlats","_s","plats","setPlats","loading","setLoading","error","setError","fetchPlats","response","getAllPlats","data","err","_err$response","_err$response$data","errorMessage","message","console","getPlat","id","_err$response2","_err$response2$data","createPlat","platData","_err$response3","_err$response3$data","Error","updatePlat","map","plat","_err$response4","_err$response4$data","deletePlat","filter","_err$response5","_err$response5$data","addPlatImages","platId","images","formData","FormData","i","length","append","_err$response6","_err$response6$data"],"sources":["C:/Users/utilisateur/Desktop/jimmys_restaurant/frontend/src/components/hook/usePlat.js"],"sourcesContent":["import { useState,} from 'react';\r\nimport { platAPI } from '../../api/config';\r\n\r\nexport const usePlats = () => {\r\n    const [plats, setPlats] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    // Récupération de tous les plats\r\n    const fetchPlats = async () => {\r\n        setLoading(true);\r\n        setError(null);\r\n        try {\r\n            const response = await platAPI.getAllPlats();\r\n            setPlats(response.data || []);\r\n            return response.data;\r\n        } catch (err) {\r\n            const errorMessage = err.response?.data?.message || 'Erreur lors de la récupération des plats';\r\n            setError(errorMessage);\r\n            console.error(errorMessage);\r\n            return [];\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Récupération d'un plat par son ID\r\n    const getPlat = async (id) => {\r\n        setLoading(true);\r\n        setError(null);\r\n        try {\r\n            const response = await platAPI.getPlat(id);\r\n            return response.data;\r\n        } catch (err) {\r\n            const errorMessage = err.response?.data?.message || 'Erreur lors de la récupération du plat';\r\n            setError(errorMessage);\r\n            console.error(errorMessage);\r\n            return null;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Création d'un plat\r\n    const createPlat = async (platData) => {\r\n        setLoading(true);\r\n        setError(null);\r\n        try {\r\n            const response = await platAPI.createPlat(platData);\r\n            setPlats([...plats, response.data]);\r\n            return response.data;\r\n        } catch (err) {\r\n            const errorMessage = err.response?.data?.message || 'Erreur lors de la création du plat';\r\n            setError(errorMessage);\r\n            console.error(errorMessage);\r\n            throw new Error(errorMessage);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Mise à jour d'un plat\r\n    const updatePlat = async (id, platData) => {\r\n        setLoading(true);\r\n        setError(null);\r\n        try {\r\n            const response = await platAPI.updatePlat(id, platData);\r\n            setPlats(plats.map(plat => plat.id === id ? response.data : plat));\r\n            return response.data;\r\n        } catch (err) {\r\n            const errorMessage = err.response?.data?.message || 'Erreur lors de la mise à jour du plat';\r\n            setError(errorMessage);\r\n            console.error(errorMessage);\r\n            throw new Error(errorMessage);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Suppression d'un plat\r\n    const deletePlat = async (id) => {\r\n        setLoading(true);\r\n        setError(null);\r\n        try {\r\n            await platAPI.deletePlat(id);\r\n            setPlats(plats.filter(plat => plat.id !== id));\r\n            return true;\r\n        } catch (err) {\r\n            const errorMessage = err.response?.data?.message || 'Erreur lors de la suppression du plat';\r\n            setError(errorMessage);\r\n            console.error(errorMessage);\r\n            throw new Error(errorMessage);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Ajout d'images à un plat\r\n    const addPlatImages = async (platId, images) => {\r\n        setLoading(true);\r\n        setError(null);\r\n        try {\r\n            const formData = new FormData();\r\n            \r\n            for (let i = 0; i < images.length; i++) {\r\n                formData.append('images', images[i]);\r\n            }\r\n            \r\n            const response = await platAPI.addPlatImages(platId, formData);\r\n            \r\n            // Mise à jour du plat local avec les nouvelles images\r\n            setPlats(plats.map(plat => {\r\n                if (plat.id === platId) {\r\n                    return { ...plat, images: [...(plat.images || []), ...response.data.images] };\r\n                }\r\n                return plat;\r\n            }));\r\n            \r\n            return response.data;\r\n        } catch (err) {\r\n            const errorMessage = err.response?.data?.message || 'Erreur lors de l\\'ajout des images';\r\n            setError(errorMessage);\r\n            console.error(errorMessage);\r\n            throw new Error(errorMessage);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return {\r\n        plats,\r\n        loading,\r\n        error,\r\n        fetchPlats,\r\n        getPlat,\r\n        createPlat,\r\n        updatePlat,\r\n        deletePlat,\r\n        addPlatImages\r\n    };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}